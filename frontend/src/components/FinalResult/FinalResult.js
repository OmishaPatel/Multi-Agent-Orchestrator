export class FinalResult {
    constructor(container, result, options = {}) {
        this.container = container;
        this.result = result;
        this.options = {
            enableExport: true,
            enableSharing: true,
            showMetadata: true,
            markdownRenderer: 'simple', // 'simple' or 'advanced'
            ...options
        };

        this.element = null;
        this.contentElement = null;
        this.exportButton = null;
        this.shareButton = null;
        this.copyButton = null;

        // Simple markdown parser
        this.markdownParser = new SimpleMarkdownParser();

        this.init();
    }

    init() {
        this.createElement();
        this.bindEvents();
        this.render();
    }

    createElement() {
        this.element = document.createElement('div');
        this.element.className = 'final-result';

        this.element.innerHTML = `
            <div class="final-result__header">
                <div class="final-result__title">
                    <h2>Workflow Complete</h2>
                    <div class="completion-badge">
                        <span class="completion-icon">‚úÖ</span>
                        <span class="completion-text">Success</span>
                    </div>
                </div>
                
                ${this.options.showMetadata ? `
                    <div class="final-result__metadata">
                        <div class="metadata-item">
                            <span class="metadata-label">Completed:</span>
                            <span class="metadata-value">${this.formatTimestamp(this.result.completed_at)}</span>
                        </div>
                        <div class="metadata-item">
                            <span class="metadata-label">Duration:</span>
                            <span class="metadata-value">${this.calculateDuration()}</span>
                        </div>
                        <div class="metadata-item">
                            <span class="metadata-label">Tasks:</span>
                            <span class="metadata-value">${this.result.total_tasks || 'N/A'}</span>
                        </div>
                    </div>
                ` : ''}
                
                <div class="final-result__actions">
                    ${this.options.enableExport ? `
                        <button class="action-button action-button--primary export-button" type="button">
                            <span class="button-icon">üìÑ</span>
                            Export Report
                        </button>
                    ` : ''}
                    
                    <button class="action-button action-button--secondary copy-button" type="button">
                        <span class="button-icon">üìã</span>
                        Copy to Clipboard
                    </button>
                    
                    ${this.options.enableSharing ? `
                        <button class="action-button action-button--secondary share-button" type="button">
                            <span class="button-icon">üîó</span>
                            Share
                        </button>
                    ` : ''}
                </div>
            </div>
            
            <div class="final-result__content">
                <div class="content-container">
                    <div class="rendered-content"></div>
                </div>
            </div>
            
            <div class="final-result__footer">
                <div class="footer-info">
                    <span class="footer-text">Generated by Clarity.ai</span>
                    <span class="footer-separator">‚Ä¢</span>
                    <span class="footer-text">${new Date().toLocaleDateString()}</span>
                </div>
            </div>
        `;

        this.container.appendChild(this.element);

        // Cache important elements
        this.contentElement = this.element.querySelector('.rendered-content');
        this.exportButton = this.element.querySelector('.export-button');
        this.shareButton = this.element.querySelector('.share-button');
        this.copyButton = this.element.querySelector('.copy-button');
    }

    bindEvents() {
        if (this.exportButton) {
            this.exportButton.addEventListener('click', () => this.handleExport());
        }

        if (this.shareButton) {
            this.shareButton.addEventListener('click', () => this.handleShare());
        }

        if (this.copyButton) {
            this.copyButton.addEventListener('click', () => this.handleCopy());
        }

        // Handle print functionality
        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'p') {
                e.preventDefault();
                this.handlePrint();
            }
        });
    }

    render() {
        if (!this.contentElement) return;

        let content = this.result.final_report || this.result.content || '';

        // Render markdown content
        if (this.options.markdownRenderer === 'advanced') {
            content = this.markdownParser.parseAdvanced(content);
        } else {
            content = this.markdownParser.parseSimple(content);
        }

        this.contentElement.innerHTML = content;

        // Add syntax highlighting for code blocks
        this.highlightCodeBlocks();

        // Add copy buttons to code blocks
        this.addCodeBlockCopyButtons();
    }

    highlightCodeBlocks() {
        const codeBlocks = this.contentElement.querySelectorAll('pre code');
        codeBlocks.forEach(block => {
            // Simple syntax highlighting (could be enhanced with a library)
            this.applySyntaxHighlighting(block);
        });
    }

    applySyntaxHighlighting(codeBlock) {
        let content = codeBlock.textContent;

        // Simple Python syntax highlighting
        if (codeBlock.className.includes('python')) {
            content = content
                .replace(/\b(def|class|import|from|if|else|elif|for|while|try|except|finally|with|as|return|yield|break|continue|pass|lambda|and|or|not|in|is|None|True|False)\b/g, '<span class="keyword">$1</span>')
                .replace(/\b(\d+\.?\d*)\b/g, '<span class="number">$1</span>')
                .replace(/(["'])((?:\\.|(?!\1)[^\\])*?)\1/g, '<span class="string">$1$2$1</span>')
                .replace(/#.*/g, '<span class="comment">$&</span>');
        }

        // Simple JavaScript syntax highlighting
        if (codeBlock.className.includes('javascript') || codeBlock.className.includes('js')) {
            content = content
                .replace(/\b(function|const|let|var|if|else|for|while|do|switch|case|default|try|catch|finally|return|break|continue|class|extends|import|export|from|async|await|new|this|super|static|get|set)\b/g, '<span class="keyword">$1</span>')
                .replace(/\b(\d+\.?\d*)\b/g, '<span class="number">$1</span>')
                .replace(/(["'`])((?:\\.|(?!\1)[^\\])*?)\1/g, '<span class="string">$1$2$1</span>')
                .replace(/\/\/.*/g, '<span class="comment">$&</span>')
                .replace(/\/\*[\s\S]*?\*\//g, '<span class="comment">$&</span>');
        }

        codeBlock.innerHTML = content;
    }

    addCodeBlockCopyButtons() {
        const codeBlocks = this.contentElement.querySelectorAll('pre');
        codeBlocks.forEach(block => {
            const copyButton = document.createElement('button');
            copyButton.className = 'code-copy-button';
            copyButton.innerHTML = '<span class="copy-icon">üìã</span>';
            copyButton.title = 'Copy code';

            copyButton.addEventListener('click', async () => {
                const code = block.querySelector('code').textContent;
                try {
                    await navigator.clipboard.writeText(code);
                    copyButton.innerHTML = '<span class="copy-icon">‚úÖ</span>';
                    setTimeout(() => {
                        copyButton.innerHTML = '<span class="copy-icon">üìã</span>';
                    }, 2000);
                } catch (err) {
                    console.error('Failed to copy code:', err);
                }
            });

            block.style.position = 'relative';
            block.appendChild(copyButton);
        });
    }

    async handleExport() {
        if (!this.exportButton) return;

        this.exportButton.disabled = true;
        this.exportButton.innerHTML = '<span class="button-icon">‚è≥</span>Exporting...';

        try {
            // Create export content
            const exportContent = this.generateExportContent();

            // Create and download file
            const blob = new Blob([exportContent], { type: 'text/markdown' });
            const url = URL.createObjectURL(blob);

            const a = document.createElement('a');
            a.href = url;
            a.download = `clarity-report-${this.generateFilename()}.md`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            URL.revokeObjectURL(url);

            // Show success feedback
            this.exportButton.innerHTML = '<span class="button-icon">‚úÖ</span>Exported!';
            setTimeout(() => {
                this.exportButton.innerHTML = '<span class="button-icon">üìÑ</span>Export Report';
                this.exportButton.disabled = false;
            }, 2000);

        } catch (error) {
            console.error('Export failed:', error);
            this.exportButton.innerHTML = '<span class="button-icon">‚ùå</span>Export Failed';
            setTimeout(() => {
                this.exportButton.innerHTML = '<span class="button-icon">üìÑ</span>Export Report';
                this.exportButton.disabled = false;
            }, 2000);
        }
    }

    async handleCopy() {
        if (!this.copyButton) return;

        try {
            const content = this.result.final_report || this.result.content || '';
            await navigator.clipboard.writeText(content);

            this.copyButton.innerHTML = '<span class="button-icon">‚úÖ</span>Copied!';
            setTimeout(() => {
                this.copyButton.innerHTML = '<span class="button-icon">üìã</span>Copy to Clipboard';
            }, 2000);

        } catch (error) {
            console.error('Copy failed:', error);
            this.copyButton.innerHTML = '<span class="button-icon">‚ùå</span>Copy Failed';
            setTimeout(() => {
                this.copyButton.innerHTML = '<span class="button-icon">üìã</span>Copy to Clipboard';
            }, 2000);
        }
    }

    async handleShare() {
        if (!this.shareButton) return;

        try {
            if (navigator.share) {
                // Use native sharing if available
                await navigator.share({
                    title: 'Clarity.ai Report',
                    text: 'Check out this AI-generated report',
                    url: window.location.href
                });
            } else {
                // Fallback: copy URL to clipboard
                await navigator.clipboard.writeText(window.location.href);
                this.shareButton.innerHTML = '<span class="button-icon">‚úÖ</span>URL Copied!';
                setTimeout(() => {
                    this.shareButton.innerHTML = '<span class="button-icon">üîó</span>Share';
                }, 2000);
            }
        } catch (error) {
            console.error('Share failed:', error);
        }
    }

    handlePrint() {
        // Create print-friendly version
        const printWindow = window.open('', '_blank');
        const printContent = this.generatePrintContent();

        printWindow.document.write(printContent);
        printWindow.document.close();
        printWindow.print();
    }

    generateExportContent() {
        const metadata = `# Clarity.ai Report

**Generated:** ${this.formatTimestamp(this.result.completed_at)}
**Duration:** ${this.calculateDuration()}
**Tasks Completed:** ${this.result.total_tasks || 'N/A'}

---

`;

        const content = this.result.final_report || this.result.content || '';
        return metadata + content;
    }

    generatePrintContent() {
        const content = this.contentElement.innerHTML;
        return `
            <!DOCTYPE html>
            <html>
            <head>
                <title>Clarity.ai Report</title>
                <style>
                    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; max-width: 800px; margin: 0 auto; padding: 20px; }
                    h1, h2, h3 { color: #333; }
                    pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
                    code { background: #f0f0f0; padding: 2px 4px; border-radius: 3px; }
                    blockquote { border-left: 4px solid #ddd; margin: 0; padding-left: 20px; color: #666; }
                    .code-copy-button { display: none; }
                </style>
            </head>
            <body>
                <h1>Clarity.ai Report</h1>
                <p><strong>Generated:</strong> ${this.formatTimestamp(this.result.completed_at)}</p>
                <hr>
                ${content}
            </body>
            </html>
        `;
    }

    generateFilename() {
        const date = new Date();
        const dateStr = date.toISOString().split('T')[0];
        const timeStr = date.toTimeString().split(' ')[0].replace(/:/g, '-');
        return `${dateStr}_${timeStr}`;
    }

    formatTimestamp(timestamp) {
        if (!timestamp) return 'Unknown';
        try {
            return new Date(timestamp).toLocaleString();
        } catch (e) {
            return timestamp;
        }
    }

    calculateDuration() {
        if (!this.result.started_at || !this.result.completed_at) {
            return 'Unknown';
        }

        try {
            const start = new Date(this.result.started_at);
            const end = new Date(this.result.completed_at);
            const duration = end - start;

            const minutes = Math.floor(duration / 60000);
            const seconds = Math.floor((duration % 60000) / 1000);

            if (minutes > 0) {
                return `${minutes}m ${seconds}s`;
            } else {
                return `${seconds}s`;
            }
        } catch (e) {
            return 'Unknown';
        }
    }

    update(newResult) {
        this.result = { ...this.result, ...newResult };
        this.render();
    }

    destroy() {
        if (this.element && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
    }
}

/**
 * Simple Markdown Parser - Lightweight markdown rendering
 */
class SimpleMarkdownParser {
    parseSimple(markdown) {
        if (!markdown) return '';

        return markdown
            // Headers
            .replace(/^### (.*$)/gm, '<h3>$1</h3>')
            .replace(/^## (.*$)/gm, '<h2>$1</h2>')
            .replace(/^# (.*$)/gm, '<h1>$1</h1>')

            // Bold and italic
            .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>')
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')

            // Code blocks
            .replace(/```(\w+)?\n([\s\S]*?)```/g, '<pre><code class="$1">$2</code></pre>')
            .replace(/`([^`]+)`/g, '<code>$1</code>')

            // Links
            .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener">$1</a>')

            // Lists
            .replace(/^\* (.+)$/gm, '<li>$1</li>')
            .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
            .replace(/^\d+\. (.+)$/gm, '<li>$1</li>')

            // Blockquotes
            .replace(/^> (.+)$/gm, '<blockquote>$1</blockquote>')

            // Line breaks
            .replace(/\n\n/g, '</p><p>')
            .replace(/^(.+)$/gm, '<p>$1</p>')

            // Clean up
            .replace(/<p><\/p>/g, '')
            .replace(/<p>(<h[1-6]>)/g, '$1')
            .replace(/(<\/h[1-6]>)<\/p>/g, '$1')
            .replace(/<p>(<ul>)/g, '$1')
            .replace(/(<\/ul>)<\/p>/g, '$1')
            .replace(/<p>(<blockquote>)/g, '$1')
            .replace(/(<\/blockquote>)<\/p>/g, '$1');
    }

    parseAdvanced(markdown) {
        // For advanced parsing, you could integrate a library like marked.js
        // For now, use the simple parser
        return this.parseSimple(markdown);
    }
}
